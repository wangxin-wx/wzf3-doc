import{_ as s,o as a,c as n,Q as o}from"./chunks/framework.5061d337.js";const u=JSON.parse('{"title":"项目根目录下 config/config.*.ts","description":"","frontmatter":{},"headers":[],"relativePath":"config/share.md","filePath":"config/share.md"}'),e={name:"config/share.md"},l=o(`<h1 id="项目根目录下-config-config-ts" tabindex="-1">项目根目录下 <code>config/config.*.ts</code> <a class="header-anchor" href="#项目根目录下-config-config-ts" aria-label="Permalink to &quot;项目根目录下 \`config/config.*.ts\`&quot;">​</a></h1><h2 id="apps" tabindex="-1">apps <a class="header-anchor" href="#apps" aria-label="Permalink to &quot;apps&quot;">​</a></h2><ul><li><strong>类型：</strong> <code>{ [key: string]: { port: number enabled?: boolean hostname?: string _chostname?: string } }</code></li><li><strong>默认：</strong> <code>{}</code></li></ul><p>示例：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// config/config.*.ts</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">trickd</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ModuleOptions</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  apps: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 项目根目录需有app.exp目录</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;app.exp&#39;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      port: </span><span style="color:#79B8FF;">80</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 端口</span></span>
<span class="line"><span style="color:#E1E4E8;">      enabled: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 是否启用当前app，若false，在启动或构建时忽略会此app</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 用于多app路由跳转。若未配置，hostname值默认为(server.domain||127.0.0.1)+port</span></span>
<span class="line"><span style="color:#E1E4E8;">      hostname: </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 使用app代理时，app的真实ip:port</span></span>
<span class="line"><span style="color:#E1E4E8;">      _chostname: string</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// config/config.*.ts</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">trickd</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ModuleOptions</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  apps: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 项目根目录需有app.exp目录</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;app.exp&#39;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">      port: </span><span style="color:#005CC5;">80</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 端口</span></span>
<span class="line"><span style="color:#24292E;">      enabled: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 是否启用当前app，若false，在启动或构建时忽略会此app</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 用于多app路由跳转。若未配置，hostname值默认为(server.domain||127.0.0.1)+port</span></span>
<span class="line"><span style="color:#24292E;">      hostname: </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 使用app代理时，app的真实ip:port</span></span>
<span class="line"><span style="color:#24292E;">      _chostname: string</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>多app路由跳转时，获取app的路由地址：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">runtimeConfig</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useRuntimeConfig</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">location.href </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> runtimeConfig.public.trickd.apps[</span><span style="color:#9ECBFF;">&#39;app.exp&#39;</span><span style="color:#E1E4E8;">].hostname</span></span>
<span class="line"><span style="color:#6A737D;">// =&gt; http://127.0.0.1</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">runtimeConfig</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useRuntimeConfig</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">location.href </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> runtimeConfig.public.trickd.apps[</span><span style="color:#032F62;">&#39;app.exp&#39;</span><span style="color:#24292E;">].hostname</span></span>
<span class="line"><span style="color:#6A737D;">// =&gt; http://127.0.0.1</span></span></code></pre></div><h2 id="env" tabindex="-1">env <a class="header-anchor" href="#env" aria-label="Permalink to &quot;env&quot;">​</a></h2><ul><li><strong>类型：</strong> <code>Record&lt;string, any&gt;</code></li><li><strong>默认：</strong> <code>{}</code></li></ul><p>自定义全局常量，项目内通过 <code>useRuntimeConfig().public.trickd.env</code> 获取。示例：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// config/config.*.ts</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">trickd</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ModuleOptions</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  env:{ foo: </span><span style="color:#9ECBFF;">&#39;bar&#39;</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// config/config.*.ts</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">trickd</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ModuleOptions</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  env:{ foo: </span><span style="color:#032F62;">&#39;bar&#39;</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// *.vue</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">runtimeConfig</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">useRuntimeConfig</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(runtimeConfig.public.trickd.env[</span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;">]) </span><span style="color:#6A737D;">// &#39;bar&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// *.vue</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">runtimeConfig</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">useRuntimeConfig</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(runtimeConfig.public.trickd.env[</span><span style="color:#032F62;">&#39;foo&#39;</span><span style="color:#24292E;">]) </span><span style="color:#6A737D;">// &#39;bar&#39;</span></span></code></pre></div><h2 id="mode" tabindex="-1">mode <a class="header-anchor" href="#mode" aria-label="Permalink to &quot;mode&quot;">​</a></h2><ul><li><strong>类型：</strong> <code>&#39;alone&#39; | &#39;normal&#39; | &#39;encrypt&#39; | &#39;safe&#39; | &#39;quick&#39;</code></li><li><strong>默认：</strong> <code>&#39;normal&#39;</code></li></ul><p>启动模式。<code>alone</code>：单机模式；<code>normal</code>：正常；<code>encrypt</code>：开启加密；<code>safe</code>：安测模式 ；<code>quick</code>：性能模式</p><h2 id="server-addr" tabindex="-1">server.addr <a class="header-anchor" href="#server-addr" aria-label="Permalink to &quot;server.addr&quot;">​</a></h2><ul><li><strong>类型：</strong> <code>string</code></li><li><strong>默认：</strong> <code>&#39;&#39;</code></li></ul><p><code>@trick/core</code> 网关地址</p><h2 id="server-https" tabindex="-1">server.https <a class="header-anchor" href="#server-https" aria-label="Permalink to &quot;server.https&quot;">​</a></h2><ul><li><strong>类型：</strong> <code>boolean</code></li><li><strong>默认：</strong> <code>false</code></li></ul><p>是否启用https</p><h2 id="server-domain" tabindex="-1">server.domain <a class="header-anchor" href="#server-domain" aria-label="Permalink to &quot;server.domain&quot;">​</a></h2><ul><li><strong>类型：</strong> <code>string</code></li><li><strong>默认：</strong> <code>&#39;&#39;</code></li></ul><p>域名配置，配置后启用访问域名验证</p><h2 id="server-csp-enabled" tabindex="-1">server.csp.enabled <a class="header-anchor" href="#server-csp-enabled" aria-label="Permalink to &quot;server.csp.enabled&quot;">​</a></h2><ul><li><strong>类型：</strong> <code>boolean</code></li><li><strong>默认：</strong> <code>false</code></li></ul><p>是否启用csp</p><h2 id="server-csp-directives" tabindex="-1">server.csp.directives <a class="header-anchor" href="#server-csp-directives" aria-label="Permalink to &quot;server.csp.directives&quot;">​</a></h2><ul><li><strong>类型：</strong> <code>{ &#39;default-src&#39;?: string[] &#39;base-uri&#39;?: string[] &#39;font-src&#39;?: string[] &#39;form-action&#39;?: string[] &#39;frame-ancestors&#39;?: string[] &#39;img-src&#39;?: string[] &#39;object-src&#39;?: string[] &#39;script-src&#39;?: string[] &#39;script-src-attr&#39;?: string[] &#39;style-src&#39;?: string[] &#39;connect-src&#39;?: string[] &#39;frame-src&#39;?: string[] }</code></li><li><strong>默认：</strong> <code>{ &#39;default-src&#39;: [&quot;&#39;self&#39;&quot;], &#39;base-uri&#39;: [&quot;&#39;self&#39;&quot;], &#39;font-src&#39;: [&quot;&#39;self&#39;&quot;, &#39;https:&#39;, &#39;data:&#39;], &#39;form-action&#39;: [&quot;&#39;self&#39;&quot;], &#39;frame-ancestors&#39;: [&quot;&#39;self&#39;&quot;], &#39;img-src&#39;: [&quot;&#39;self&#39;&quot;, &#39;data:&#39;], &#39;object-src&#39;: [&quot;&#39;none&#39;&quot;], &#39;script-src&#39;: [&quot;&#39;self&#39;&quot;], &#39;script-src-attr&#39;: [&quot;&#39;none&#39;&quot;], &#39;style-src&#39;: [&quot;&#39;self&#39;&quot;, &#39;https:&#39;, &quot;&#39;unsafe-inline&#39;&quot;], &#39;connect-src&#39;: [&quot;&#39;self&#39;&quot;], &#39;frame-src&#39;: [&quot;&#39;self&#39;&quot;], }</code></li><li><strong>参考：</strong> <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Security-Policy" target="_blank" rel="noreferrer">Content-Security-Policy</a></li></ul><p>csp规则</p><h2 id="redis-type" tabindex="-1">redis.type <a class="header-anchor" href="#redis-type" aria-label="Permalink to &quot;redis.type&quot;">​</a></h2><ul><li><strong>类型：</strong> <code>&#39;single&#39; | &#39;cluster&#39; | &#39;sentinel&#39;</code></li><li><strong>默认：</strong> <code>single</code></li></ul><p>redis类型。<code>single</code> 单点；<code>cluster</code>：集群；<code>sentinel</code>：哨兵</p><p>isc?: { enabled: boolean url?: string service?: string sso?: string frontmv?: string appid?: string gateway?: boolean }</p><h2 id="isc-enabled" tabindex="-1">isc.enabled <a class="header-anchor" href="#isc-enabled" aria-label="Permalink to &quot;isc.enabled&quot;">​</a></h2><ul><li><strong>类型：</strong> <code>boolean</code></li><li><strong>默认：</strong> <code>false</code></li></ul><p>是否启用isc</p><h2 id="isc-url" tabindex="-1">isc.url <a class="header-anchor" href="#isc-url" aria-label="Permalink to &quot;isc.url&quot;">​</a></h2><ul><li><strong>类型：</strong> <code>string</code></li><li><strong>默认：</strong> <code>https://isctest.jiafly.cn:22022</code></li></ul><p>isc地址，例如：<a href="https://isctest.jiafly.cn:22022" target="_blank" rel="noreferrer">https://isctest.jiafly.cn:22022</a></p><h2 id="isc-appid" tabindex="-1">isc.appid <a class="header-anchor" href="#isc-appid" aria-label="Permalink to &quot;isc.appid&quot;">​</a></h2><ul><li><strong>类型：</strong> <code>string</code></li><li><strong>默认：</strong> <code>&#39;&#39;</code></li></ul><p>isc appId</p><h2 id="isc-sso" tabindex="-1">isc.sso <a class="header-anchor" href="#isc-sso" aria-label="Permalink to &quot;isc.sso&quot;">​</a></h2><ul><li><strong>类型：</strong> <code>string</code></li><li><strong>默认：</strong> <code>https://isctest.jiafly.cn:22022/sso</code></li></ul><p>isc sso地址，例如：<a href="https://isctest.jiafly.cn:22022/sso" target="_blank" rel="noreferrer">https://isctest.jiafly.cn:22022/sso</a></p><h2 id="isc-frontmv" tabindex="-1">isc.frontmv <a class="header-anchor" href="#isc-frontmv" aria-label="Permalink to &quot;isc.frontmv&quot;">​</a></h2><ul><li><strong>类型：</strong> <code>string</code></li><li><strong>默认：</strong> <code>https://isctest.jiafly.cn:22022/isc_frontmv_serv</code></li></ul><p>isc sso地址，例如：<a href="https://isctest.jiafly.cn:22022/isc_frontmv_serv" target="_blank" rel="noreferrer">https://isctest.jiafly.cn:22022/isc_frontmv_serv</a></p><h2 id="isc-service" tabindex="-1">isc.service <a class="header-anchor" href="#isc-service" aria-label="Permalink to &quot;isc.service&quot;">​</a></h2><ul><li><strong>类型：</strong> <code>string</code></li><li><strong>默认：</strong> <code>&#39;&#39;</code></li></ul><p>系统登录页，isc登录回调业务系统的地址，例如: &#39;<a href="http://10.120.21.12:8080" target="_blank" rel="noreferrer">http://10.120.21.12:8080</a>&#39;,</p><h2 id="isc-gateway" tabindex="-1">isc.gateway <a class="header-anchor" href="#isc-gateway" aria-label="Permalink to &quot;isc.gateway&quot;">​</a></h2><ul><li><strong>类型：</strong> <code>boolean</code></li><li><strong>默认：</strong> <code>false</code></li></ul><p>bd六期专用</p><h2 id="proxy-gateway" tabindex="-1">proxy.gateway <a class="header-anchor" href="#proxy-gateway" aria-label="Permalink to &quot;proxy.gateway&quot;">​</a></h2><ul><li><strong>类型：</strong> <code>Record&lt;string, string&gt;</code></li><li><strong>默认：</strong> <code>{}</code></li></ul><p>接口请求代理。示例：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// config/config.*.ts</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">trickd</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ModuleOptions</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    proxy: { gateway: {exp: </span><span style="color:#9ECBFF;">&#39;http://127.0.0.1:3001&#39;</span><span style="color:#E1E4E8;"> }},</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// config/config.*.ts</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">trickd</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ModuleOptions</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    proxy: { gateway: {exp: </span><span style="color:#032F62;">&#39;http://127.0.0.1:3001&#39;</span><span style="color:#24292E;"> }},</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// *.vue｜ts</span></span>
<span class="line"><span style="color:#6A737D;">// vue项目</span></span>
<span class="line"><span style="color:#B392F0;">$fetch</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/exp/post&#39;</span><span style="color:#E1E4E8;">, { method: </span><span style="color:#9ECBFF;">&#39;post&#39;</span><span style="color:#E1E4E8;"> }) </span><span style="color:#6A737D;">// 请求地址最终为http://127.0.0.1:3001/post</span></span>
<span class="line"><span style="color:#6A737D;">// nuxt项目</span></span>
<span class="line"><span style="color:#B392F0;">useFetch</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/exp/post&#39;</span><span style="color:#E1E4E8;">, { method: </span><span style="color:#9ECBFF;">&#39;post&#39;</span><span style="color:#E1E4E8;"> }) </span><span style="color:#6A737D;">// 请求地址最终为http://127.0.0.1:3001/post</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// *.vue｜ts</span></span>
<span class="line"><span style="color:#6A737D;">// vue项目</span></span>
<span class="line"><span style="color:#6F42C1;">$fetch</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/exp/post&#39;</span><span style="color:#24292E;">, { method: </span><span style="color:#032F62;">&#39;post&#39;</span><span style="color:#24292E;"> }) </span><span style="color:#6A737D;">// 请求地址最终为http://127.0.0.1:3001/post</span></span>
<span class="line"><span style="color:#6A737D;">// nuxt项目</span></span>
<span class="line"><span style="color:#6F42C1;">useFetch</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/exp/post&#39;</span><span style="color:#24292E;">, { method: </span><span style="color:#032F62;">&#39;post&#39;</span><span style="color:#24292E;"> }) </span><span style="color:#6A737D;">// 请求地址最终为http://127.0.0.1:3001/post</span></span></code></pre></div><h2 id="proxy-timeout" tabindex="-1">proxy.timeout <a class="header-anchor" href="#proxy-timeout" aria-label="Permalink to &quot;proxy.timeout&quot;">​</a></h2><ul><li><strong>类型：</strong> <code>number(毫秒)</code></li><li><strong>默认：</strong> <code>1000 * 60 * 10</code></li></ul><p>全局接口超时。如接口需单独配置时，在请求头中添加<code>x-wz-timeout</code>，优先级高于全局 <code>proxy.timeout</code>。示例：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">useFetch</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/exp/post&#39;</span><span style="color:#E1E4E8;">, { method: </span><span style="color:#9ECBFF;">&#39;post&#39;</span><span style="color:#E1E4E8;">, headers: { </span><span style="color:#9ECBFF;">&#39;x-wz-timeout&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;"> } })</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">useFetch</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/exp/post&#39;</span><span style="color:#24292E;">, { method: </span><span style="color:#032F62;">&#39;post&#39;</span><span style="color:#24292E;">, headers: { </span><span style="color:#032F62;">&#39;x-wz-timeout&#39;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;"> } })</span></span></code></pre></div><h2 id="nuxt" tabindex="-1">nuxt <a class="header-anchor" href="#nuxt" aria-label="Permalink to &quot;nuxt&quot;">​</a></h2><ul><li><strong>类型：</strong> <code>NuxtConfig</code></li><li><strong>参考：</strong> <a href="https://nuxt.com.cn/docs/api/configuration/nuxt-config" target="_blank" rel="noreferrer"><code>NuxtConfig</code></a></li></ul><p><code>nuxt</code> 项目生效，合并 <code>nuxt.config.ts</code> 配置，优先级高于 <code>nuxt.config.ts</code></p>`,67),p=[l];function t(c,r,i,d,y,E){return a(),n("div",null,p)}const h=s(e,[["render",t]]);export{u as __pageData,h as default};
